Code analysis applications
==========================

methodologies -> use cases:
---------------------------
detect subgraph's that are the same
	-> copyright
	-> malw analysis family variant static code
	-> malw analysis family variant dynamic behavior
	-> packer variant identification
	-> id' vulnerability schemes

subgraph's classification
	-> method renaming (combined classification as in image segmentation)
	-> whole code segmentation (rename according to functionality/schemes from classes)
	-> relevance(centrality, rare but important)

comb. generalization / self-semi supervised approach
	-> method renaming: subgraph multiclassification by small basic examples


GAN
	-> packer vs unpacker adversarial training
		packer: obfuscates subgraphs

		unpacker: classifies subgraphs

use cases -> methodologies
---------------------------

find control loops in obfuscated code

find selfmodifying code

taint-analysis?
	-> node classification
	-> sub-graph detection
	-> pattern matching

use after free schemes

race condition schemes

multi-threaded analysis?


Original
---------

1) match recommender systems from Internet/marketing/customer exp -> to log analysis/dynamic analysis

2) heap analysis + taint analysis with graphs
	-> papaer kernel data struct attacks counter part with graphs

Extras
------
	configuration flaws? 
		-> relational learning

	fraud detection?
		-> relational learning